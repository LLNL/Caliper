##############################################################################
# Copyright (c) 2022, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - is-machine-up
  - allocate_resources
  - build_and_test
  - release_resources

##############################################################################
# UTILITIES
.on_ruby:
  tags:
    - shell
    - ruby
  rules:
    # Runs except if we explicitly deactivate corona by variable.
    - if: '$ON_RUBY == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # We should always release resources allocated in the pipeline.
    - if: '$CI_JOB_NAME =~ /release_resources/'
      when: always
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="ruby"
    - |
      curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.print_ruby_reproducer: &print_ruby_reproducer
    - |
      echo -e "\e[7;32m### Ruby reproducer\e[0m"
      if [[ -n "${LLNL_SERVICE_USER}" ]]; then echo -e "xsu ${LLNL_SERVICE_USER}"; fi
      echo -e "
      working_dir=\"/usr/workspace/\${USER}/${GITHUB_PROJECT_NAME}/${CI_COMMIT_REF_NAME//\//-}-${CI_PIPELINE_ID}-\$(date +%s)\"
      mkdir -p \${working_dir} && cd \${working_dir} \n
      git clone https://github.com/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}.git --single-branch --depth=1 \n
      cd ${GITHUB_PROJECT_NAME}
      git fetch origin --depth=1 ${CI_COMMIT_SHA} \n
      git checkout ${CI_COMMIT_SHA} \n
      git submodule update --init --recursive \n
      SPEC=\"${SPEC//\"/\\\"}\" srun ${RUBY_BUILD_AND_TEST_JOB_ALLOC} ${BUILD_AND_TEST_CMD}"
      echo -e "\e[7;32m### End of reproducer\e[0m"

.build_and_test_on_ruby:
  extends: [.custom_build_and_test, .on_ruby]
  stage: build_and_test
  script:
    # Allocation information
    - echo -e "### Allocation name is ${ALLOC_NAME}"
    - export JOBID=$(squeue -h --name=${ALLOC_NAME} --format=%A)
    - echo -e "### Job ID is ${JOBID}"
    # Print a reproducer
    - *print_ruby_reproducer
    # The actual launch command
    - srun $( [[ -n "${JOBID}" ]] && echo "--jobid=${JOBID}" ) ${RUBY_BUILD_AND_TEST_JOB_ALLOC} ${BUILD_AND_TEST_CMD}

##############################################################################
# JOBS
is-machine-up-check:
  stage: is-machine-up
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $(jq '.ruby.total_nodes_up' /usr/global/tools/lorenz/data/loginnodeStatus) == 0 ]]
      then
        echo -e "\e[31mNo node available on Ruby\e[0m"
        curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
             --header 'Content-Type: application/json' \
             --header "authorization: Bearer ${GITHUB_TOKEN}" \
             --data "{ \"state\": \"failure\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab Ruby Down\", \"context\": \"ci/gitlab/ruby\" }"
        exit 1
      fi

# In pre-build phase, allocate a node for builds.
# TODO: make the resource configurable, not all projects will want the same.
allocate_resources (on ruby):
  variables:
    GIT_STRATEGY: none
  extends: .on_ruby
  stage: allocate_resources
  script:
    - salloc ${RUBY_BUILD_AND_TEST_SHARED_ALLOC} --no-shell --job-name=${ALLOC_NAME}

status_pending:
  extends: [.on_ruby]
  variables:
    GIT_STRATEGY: none
  stage: allocate_resources
  script:
    - export pipeline_status="pending"
    - *status_report

# Gitlab jobs for the Ruby machine at ${GITHUB_PROJECT_ORG}.
clang_10_0_1:
  variables:
    SPEC: "${PROJECT_RUBY_VARIANTS} %clang@10.0.1 ${PROJECT_RUBY_DEPS}"
  extends: .build_and_test_on_ruby

clang_9_0_0:
  variables:
    SPEC: "${PROJECT_RUBY_VARIANTS} %clang@9.0.0 ${PROJECT_RUBY_DEPS}"
  extends: .build_and_test_on_ruby

gcc_8_1_0:
  variables:
    SPEC: "${PROJECT_RUBY_VARIANTS} %gcc@8.1.0 ${PROJECT_RUBY_DEPS}"
  extends: .build_and_test_on_ruby

icpc_19_1_0:
  variables:
    SPEC: "${PROJECT_RUBY_VARIANTS} %intel@19.1.0 ${PROJECT_RUBY_DEPS}"
  extends: .build_and_test_on_ruby

pgi_20_1_gcc_local_8_3_1:
  variables:
    SPEC: "${PROJECT_RUBY_VARIANTS} %pgi@20.1 cxxflags==\"-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\" cflags==\"-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\" fflags==\"-rc=/usr/workspace/umpire/pgi/x86_64/local-gcc-8.3.1-rc\" ${PROJECT_RUBY_DEPS}"
  extends: .build_and_test_on_ruby

# In post-build phase, deallocate resources.
# Note : we make sure this is run even on build phase failure using a specific
# rule in the template ".on_ruby".
release_resources (on ruby):
  variables:
    GIT_STRATEGY: none
  extends: .on_ruby
  stage: release_resources
  script:
    - export JOBID=$(squeue -h --name=${ALLOC_NAME} --format=%A)
    - ([[ -n "${JOBID}" ]] && scancel ${JOBID})

status_success:
  extends: [.on_ruby]
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: [.on_ruby]
  variables:
    GIT_STRATEGY: none
  stage: release_resources
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure