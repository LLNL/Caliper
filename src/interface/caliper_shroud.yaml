library: Caliper
cxx_header: caliper/cali.h

namespace: cali

options:
  F_module_per_class: false

format:
  C_prefix: cali_

declarations:
  - decl: | 
      enum cali_attr_properties {
        CALI_ATTR_DEFAULT       =     0,
        CALI_ATTR_ASVALUE       =     1,
        CALI_ATTR_NOMERGE       =     2,
        CALI_ATTR_SCOPE_PROCESS =    12,
        CALI_ATTR_SCOPE_THREAD  =    20,
        CALI_ATTR_SCOPE_TASK    =    24,
        CALI_ATTR_SKIP_EVENTS   =    64,
        CALI_ATTR_HIDDEN        =   128,
        CALI_ATTR_NESTED        =   256,
        CALI_ATTR_GLOBAL        =   512,
        CALI_ATTR_UNALIGNED     =  1024
      }
    options:
      C_extern_C: true

  - decl: void cali_mpi_init()
    cpp_if: ifdef CALIPER_HAVE_MPI
    options:
      C_extern_C: true
  - decl: void cali_init()
    options:
      C_extern_C: true
  - decl: void cali_config_preset(const char* key, const char* value)
    options:
      C_extern_C: true
  - decl: void cali_config_set(const char* key, const char* value)
    options:
      C_extern_C: true

  - decl: class ScopeAnnotation
    declarations:
      - decl: ScopeAnnotation(const char* name) +name(begin)
      - decl: ~ScopeAnnotation()                +name(end)

  - decl: class Annotation
    declarations:
      - decl: Annotation(const char* key, int properties = 0) +name(new)
        default_arg_suffix:
          -
          - _with_properties
      - decl: ~Annotation() +name(delete)
      - decl: void begin(int val)
        format:
          function_suffix: _int
      - decl: void begin(const char* val)
        format:
          function_suffix: _string
      - decl: void set(int val)
        format:
          function_suffix: _int
      - decl: void set(const char* val)
        format:
          function_suffix: _string
      - decl: void end()

  - decl: class ConfigManager
    cxx_header: caliper/cali-manager.h
    declarations:
      - decl: ConfigManager()  +name(new)
      - decl: ~ConfigManager() +name(delete)
      # really bool add(const char* config) but subroutine syntax is more consistent here
      - decl: void add(const char* config)
      - decl: bool error()
      - decl: std::string error_msg()
      - decl: void start()
      - decl: void stop()
      - decl: void flush()
